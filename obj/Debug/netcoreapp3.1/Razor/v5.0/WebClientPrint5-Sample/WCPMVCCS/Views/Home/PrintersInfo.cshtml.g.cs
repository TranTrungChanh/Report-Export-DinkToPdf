#pragma checksum "D:\Demo\Demo Print\Report-Export-DinkToPdf\v5.0\WebClientPrint5-Sample\WCPMVCCS\Views\Home\PrintersInfo.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "3f283d41dd36e9ec2658ba68ad8afc203eabe706"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.v5_0_WebClientPrint5_Sample_WCPMVCCS_Views_Home_PrintersInfo), @"mvc.1.0.view", @"/v5.0/WebClientPrint5-Sample/WCPMVCCS/Views/Home/PrintersInfo.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3f283d41dd36e9ec2658ba68ad8afc203eabe706", @"/v5.0/WebClientPrint5-Sample/WCPMVCCS/Views/Home/PrintersInfo.cshtml")]
    public class v5_0_WebClientPrint5_Sample_WCPMVCCS_Views_Home_PrintersInfo : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "D:\Demo\Demo Print\Report-Export-DinkToPdf\v5.0\WebClientPrint5-Sample\WCPMVCCS\Views\Home\PrintersInfo.cshtml"
  
    ViewBag.Title = "PrintersInfo";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            DefineSection("styles", async() => {
                WriteLiteral("\r\n\r\n    <style type=\"text/css\">\r\n        .glyphicon-refresh-animate {\r\n            -animation: spin .7s infinite linear;\r\n            -webkit-animation: spin2 .7s infinite linear;\r\n        }\r\n\r\n        ");
                WriteLiteral("@-webkit-keyframes spin2 {\r\n            from {\r\n                -webkit-transform: rotate(0deg);\r\n            }\r\n\r\n            to {\r\n                -webkit-transform: rotate(360deg);\r\n            }\r\n        }\r\n\r\n        ");
                WriteLiteral("@keyframes spin {\r\n            from {\r\n                transform: scale(1) rotate(0deg);\r\n            }\r\n\r\n            to {\r\n                transform: scale(1) rotate(360deg);\r\n            }\r\n        }\r\n    </style>\r\n\r\n");
            }
            );
            WriteLiteral(@"

    <h2><a href=""/home/samples"" class=""btn btn-md btn-danger""><i class=""fa fa-chevron-left""></i></a>&nbsp;Getting Printers Info</h2>

    <p>The following section shows you how to get useful info from the client printers. Please click in the button <strong>Get Printers Info</strong> below.</p>

<hr />

<div class=""container"">
    <div class=""row"">

        <div class=""col-md-3"">
            <a onclick=""javascript:jsWebClientPrint.getPrintersInfo(); $('#spinner').css('visibility', 'visible');"" class=""btn btn-success"">Get Printers Info...</a>
        </div>
        <div class=""col-md-9"">
            <h3 id=""spinner"" style=""visibility: hidden""><span class=""label label-info""><span class=""glyphicon glyphicon-refresh glyphicon-refresh-animate""></span>Please wait a few seconds...</span></h3>
        </div>
    </div>


    <div class=""row"">
        <div class=""col-md-12"">
            <div class=""form-group"">
                <div class=""row"">
                    <div class=""col-md-3"">

   ");
            WriteLiteral(@"                     <label for=""lstPrinters"">Printers:</label>
                        <select name=""lstPrinters"" id=""lstPrinters"" onchange=""showSelectedPrinterInfo();"" class=""form-control form-control-sm""></select>

                    </div>
                    <div class=""col-md-3"">
                        <label>It seems to be a...</label>
                        <div>
                            <h2 id=""deviceType""></h2>
                        </div>
                    </div>
                    <div class=""col-md-3"">

                        <label for=""lstPrinterTrays"">Supported Trays:</label>
                        <select name=""lstPrinterTrays"" id=""lstPrinterTrays"" class=""form-control form-control-sm""></select>


                    </div>
                    <div class=""col-md-3"">

                        <label for=""lstPrinterPapers"">Supported Papers:</label>
                        <select name=""lstPrinterPapers"" id=""lstPrinterPapers"" class=""form-control form-control-sm""></");
            WriteLiteral(@"select>

                    </div>
                </div>
                <div class=""row"">
                    <div class=""col-md-12"">
                        <br />
                        <br />
                        <table class=""table"">
                            <tbody>
                                <tr>
                                    <td><strong>Port Name:</strong></td>
                                    <td>
                                        <span id=""txtPortName"" />
                                    </td>
                                    <td><strong>Horizontal Resolution (dpi):</strong></td>
                                    <td>
                                        <span id=""txtHRes"" />
                                    </td>
                                    <td><strong>Vertical Resolution (dpi):</strong></td>
                                    <td>
                                        <span id=""txtVRes"" />
                                  ");
            WriteLiteral(@"  </td>
                                </tr>
                                <tr>
                                    <td colspan=""2"">
                                        <h4><span id=""isConnected"" class=""label label-default glyphicon glyphicon-minus"">&nbsp;</span> Is Connected?</h4>

                                    </td>
                                    <td colspan=""2"">
                                        <h4><span id=""isDefault"" class=""label label-default glyphicon glyphicon-minus"">&nbsp;</span> Is Default?</h4>
                                    </td>
                                    <td colspan=""2"">
                                        <h4><span id=""isBIDIEnabled"" class=""label label-default glyphicon glyphicon-minus"">&nbsp;</span> Is BIDI Enabled?</h4>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan=""2"">
                                        <h4><spa");
            WriteLiteral(@"n id=""isLocal"" class=""label label-default glyphicon glyphicon-minus"">&nbsp;</span> Is Local?</h4>
                                    </td>
                                    <td colspan=""2"">
                                        <h4><span id=""isNetwork"" class=""label label-default glyphicon glyphicon-minus"">&nbsp;</span> Is Network?</h4>
                                    </td>
                                    <td colspan=""2"">
                                        <h4><span id=""isShared"" class=""label label-default glyphicon glyphicon-minus"">&nbsp;</span> Is Shared?</h4>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan=""2"">
                                        <h4><span id=""duplex"" class=""label label-default glyphicon glyphicon-minus"">&nbsp;</span> Duplex Support?</h4>
                                    </td>
                                    <td colspan=""2""></td>
   ");
            WriteLiteral(@"                                 <td colspan=""2""></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>


<script type=""text/javascript"">

        var clientPrinters = null;

        var wcppGetPrintersTimeout_ms = 60000; //60 sec
        var wcppGetPrintersTimeoutStep_ms = 500; //0.5 sec
        function wcpGetPrintersOnSuccess() {
            $('#spinner').css('visibility', 'hidden');
            // Display client installed printers
            if (arguments[0].length > 0) {
                if (JSON) {
                    try {
                        clientPrinters = JSON.parse(arguments[0]);
                        if (clientPrinters.error) {
                            alert(clientPrinters.error)
                        } else {
                            var options = '';
                            for (var i = 0");
            WriteLiteral(@"; i < clientPrinters.length; i++) {
                                options += '<option>' + clientPrinters[i].name + '</option>';
                            }
                            $('#lstPrinters').html(options);
                            $('#lstPrinters').focus();

                            showSelectedPrinterInfo();
                        }
                    } catch (e) {
                        alert(e.message)
                    }
                }


            } else {
                alert(""No printers are installed in your system."");
            }
        }
        function wcpGetPrintersOnFailure() {
            $('#spinner').css('visibility', 'hidden');
            // Do something if printers cannot be got from the client
            alert(""No printers are installed in your system."");
        }


        function showSelectedPrinterInfo() {
            // get selected printer index
            var idx = $(""#lstPrinters"")[0].selectedIndex;
            // ge");
            WriteLiteral(@"t supported trays
            var options = '';
            if (clientPrinters[idx].trays) {
                for (var i = 0; i < clientPrinters[idx].trays.length; i++) {
                    options += '<option>' + clientPrinters[idx].trays[i] + '</option>';
                }
            }
            $('#lstPrinterTrays').html(options);
            // get supported papers
            options = '';
            if (clientPrinters[idx].papers) {
                for (var i = 0; i < clientPrinters[idx].papers.length; i++) {
                    options += '<option>' + clientPrinters[idx].papers[i] + '</option>';
                }
            }
            $('#lstPrinterPapers').html(options);
            // additional info...
            $('#txtPortName').text(clientPrinters[idx].portName);
            $('#txtHRes').text(clientPrinters[idx].hRes);
            $('#txtVRes').text(clientPrinters[idx].vRes);
            $('#isConnected').attr('class', (clientPrinters[idx].isConnected ? 'label label-");
            WriteLiteral(@"info glyphicon glyphicon-ok' : 'label label-danger glyphicon glyphicon-remove'));
            $('#isDefault').attr('class', (clientPrinters[idx].isDefault ? 'label label-info glyphicon glyphicon-ok' : 'label label-danger glyphicon glyphicon-remove'));
            $('#isBIDIEnabled').attr('class', (clientPrinters[idx].isBIDIEnabled ? 'label label-info glyphicon glyphicon-ok' : 'label label-danger glyphicon glyphicon-remove'));
            $('#isLocal').attr('class', (clientPrinters[idx].isLocal ? 'label label-info glyphicon glyphicon-ok' : 'label label-danger glyphicon glyphicon-remove'));
            $('#isNetwork').attr('class', (clientPrinters[idx].isNetwork ? 'label label-info glyphicon glyphicon-ok' : 'label label-danger glyphicon glyphicon-remove'));
            $('#isShared').attr('class', (clientPrinters[idx].isShared ? 'label label-info glyphicon glyphicon-ok' : 'label label-danger glyphicon glyphicon-remove'));
            $('#duplex').attr('class', (clientPrinters[idx].duplex ? 'label label-in");
            WriteLiteral(@"fo glyphicon glyphicon-ok' : 'label label-danger glyphicon glyphicon-remove'));
            let isVirtual = isVirtualPrinter(clientPrinters[idx]);
            $('#deviceType').attr('class', (isVirtual ? 'label label-danger' : 'label label-primary'));
            $('#deviceType').text(isVirtual ? 'VIRTUAL PRINTER' : 'REAL/PHYSICAL PRINTER');
        }

        //Guessing whether a printer is Virtual or real/physical
        function isVirtualPrinter(clientPrinter) {
            let printerPort = clientPrinter.portName.toLowerCase();
            //For Windows
            if (printerPort != ""nul"" && clientPrinter.isBIDIEnabled) return false;
            //For Unix
            if (printerPort.indexOf(""usb"") >= 0 && printerPort.indexOf(""?serial="") >= 0) return false;

            return true;
        }

</script>


");
            DefineSection("scripts", async() => {
                WriteLiteral("\r\n\r\n");
                WriteLiteral("\r\n    ");
#nullable restore
#line 242 "D:\Demo\Demo Print\Report-Export-DinkToPdf\v5.0\WebClientPrint5-Sample\WCPMVCCS\Views\Home\PrintersInfo.cshtml"
Write(Html.Raw(ViewBag.WCPScript));

#line default
#line hidden
#nullable disable
                WriteLiteral(";\r\n\r\n\r\n");
            }
            );
            WriteLiteral("\r\n\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
