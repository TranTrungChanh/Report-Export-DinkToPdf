#pragma checksum "D:\Demo\Demo Print\Report-Export-DinkToPdf\v5.0\WebClientPrint5-Sample\WCPMVCCS\Views\DemoPrintFileWithPwdProtection\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "cbde55e4845ebac0805845dca4f3f6a5a3045d8e"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.v5_0_WebClientPrint5_Sample_WCPMVCCS_Views_DemoPrintFileWithPwdProtection_Index), @"mvc.1.0.view", @"/v5.0/WebClientPrint5-Sample/WCPMVCCS/Views/DemoPrintFileWithPwdProtection/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"cbde55e4845ebac0805845dca4f3f6a5a3045d8e", @"/v5.0/WebClientPrint5-Sample/WCPMVCCS/Views/DemoPrintFileWithPwdProtection/Index.cshtml")]
    public class v5_0_WebClientPrint5_Sample_WCPMVCCS_Views_DemoPrintFileWithPwdProtection_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "D:\Demo\Demo Print\Report-Export-DinkToPdf\v5.0\WebClientPrint5-Sample\WCPMVCCS\Views\DemoPrintFileWithPwdProtection\Index.cshtml"
  
    ViewBag.Title = "Print Files With Password Protection";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""container"">
    <div class=""row"">

        <h3><a href=""/home/samples"" class=""btn btn-md btn-danger""><i class=""fa fa-chevron-left""></i></a>&nbsp;Print Files With Password Protection without displaying any Print dialog! <small>(if needed)</small></h3>
        <p>
            With <strong>WebClientPrint for ASP.NET</strong> solution you can <strong>print password protected PDF, DOC &amp; XLS files</strong> right to any installed printer at the client side.
        </p>

        <div class=""alert alert-info"">
            The file password is set at server side and then it's encrypted (using RSA) and embedded into the file metadata. Although the file is downloaded to the client machine, it keeps password protected. The WebClientPrint Processor app, loads the file in memory and unlock the file in system memory for printing it.
        </div>

        <div class=""well"">
            <p>
                The following are pre-selected files to test WebClientPrint File Printing with Password");
            WriteLiteral(@" Protection feature enabled. You can download the files for testing them. The password for all files is <code>ABC123</code>
            </p>
            <div class=""row"">
                <div class=""col-md-4 col-md-offset-2"">
                    <hr />
                    <div class=""checkbox"">
                        <label>
                            <input type=""checkbox"" id=""useDefaultPrinter"" />
                            <strong>Print to Default printer</strong> or...
                        </label>
                    </div>
                    <div id=""loadPrinters"">
                        Click to load and select one of the installed printers!
                        <br />
                        <a onclick=""javascript:jsWebClientPrint.getPrinters();"" class=""btn btn-success"">Load installed printers...</a>
                        <br />
                        <br />
                    </div>
                    <div id=""installedPrinters"" style=""visibility: hidden"">
         ");
            WriteLiteral(@"               <label for=""installedPrinterName"">Select an installed Printer:</label>
                        <select name=""installedPrinterName"" id=""installedPrinterName"" class=""form-control""></select>
                    </div>
                    <script type=""text/javascript"">
                            //var wcppGetPrintersDelay_ms = 0;
                            var wcppGetPrintersTimeout_ms = 60000; //60 sec
                            var wcppGetPrintersTimeoutStep_ms = 500; //0.5 sec
                            function wcpGetPrintersOnSuccess() {
                                // Display client installed printers
                                if (arguments[0].length > 0) {
                                    var p = arguments[0].split(""|"");
                                    var options = '';
                                    for (var i = 0; i < p.length; i++) {
                                        options += '<option>' + p[i] + '</option>';
                                 ");
            WriteLiteral(@"   }
                                    $('#installedPrinters').css('visibility', 'visible');
                                    $('#installedPrinterName').html(options);
                                    $('#installedPrinterName').focus();
                                    $('#loadPrinters').hide();
                                } else {
                                    alert(""No printers are installed in your system."");
                                }
                            }
                            function wcpGetPrintersOnFailure() {
                                // Do something if printers cannot be got from the client
                                alert(""No printers are installed in your system."");
                            }
                    </script>
                </div>
                <div class=""col-md-4"">
                    <hr />
                    <div id=""fileToPrint"">
                        <label for=""ddlFileType"">Select a sample File to p");
            WriteLiteral(@"rint:</label>
                        <select id=""ddlFileType"" class=""form-control"">
                            <option>PDF</option>
                            <option>DOC</option>
                            <option>XLS</option>
                        </select>
                        <br />
                        <a class=""btn btn-success btn-lg"" onclick=""javascript:jsWebClientPrint.print('encryptPassword=true' + '&useDefaultPrinter=' + $('#useDefaultPrinter').attr('checked') + '&printerName=' + encodeURIComponent($('#installedPrinterName').val()) + '&filetype=' + $('#ddlFileType').val());"">Print File...</a>
                        <br /><br />
                        <a class=""btn btn-info btn-sm"" href=""files/LoremIpsum-PasswordProtected.pdf"" target=""_blank""><i class=""fa fa-download""></i>&nbsp;PDF</a>
                        <a class=""btn btn-info btn-sm"" href=""files/LoremIpsum-PasswordProtected.doc"" target=""_blank""><i class=""fa fa-download""></i>&nbsp;DOC</a>
                        <a class");
            WriteLiteral("=\"btn btn-info btn-sm\" href=\"files/SampleSheet-PasswordProtected.xls\" target=\"_blank\"><i class=\"fa fa-download\"></i>&nbsp;XLS</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n\r\n    </div>\r\n</div>\r\n\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral("\r\n    \r\n");
                WriteLiteral("\r\n");
#nullable restore
#line 97 "D:\Demo\Demo Print\Report-Export-DinkToPdf\v5.0\WebClientPrint5-Sample\WCPMVCCS\Views\DemoPrintFileWithPwdProtection\Index.cshtml"
Write(Html.Raw(ViewBag.WCPScript));

#line default
#line hidden
#nullable disable
                WriteLiteral(";\r\n\r\n    ");
            }
            );
            WriteLiteral("\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
